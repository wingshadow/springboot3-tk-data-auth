package ${packageName}.service.impl;

import cn.hutool.core.bean.BeanUtil;
import com.hawk.utils.StringUtils;
#if($table.crud || $table.sub)
import com.github.pagehelper.PageInfo;
import com.github.pagehelper.page.PageMethod;
import com.hawk.framework.base.BaseServiceImpl;
#end
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import ${packageName}.domain.${ClassName};
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.service.I${ClassName}Service;

import java.util.List;
import java.util.Map;
import java.util.Collection;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@RequiredArgsConstructor
@Service
public class ${ClassName}ServiceImpl extends BaseServiceImpl<${ClassName}> implements ${ClassName}Service {

    private final ${ClassName}Mapper baseMapper;


#if($table.crud || $table.sub)
    /**
     * 查询${functionName}列表
     */
    @Override
    public PageInfo<${ClassName}> queryPageList(${ClassName} entity, int pageNum, int pageSize) {
        String whereCause = buildQueryExample(bo);
        PageInfo<${ClassName}> result = baseMapper.selectVoPage(whereCause);
        return new PageInfo<>(list);
    }
#end

    /**
     * 查询${functionName}列表
     */
    @Override
    public List<${ClassName}> queryList(${ClassName} entity) {
        String whereCause = buildQueryExample(sysUser);
        return baseMapper.selectVoList(lqw);
    }

    private Example buildQueryExample(${ClassName} entity) {
        Map<String, Object> params = entity.getParams();
        Example example = new Example(${ClassName}.class);
        CriteriaUtils.builder(example.createCriteria())
        #foreach($column in $columns)
        #if($column.query)
        #set($queryType=$column.queryType)
        #set($javaField=$column.javaField)
        #set($javaType=$column.javaType)
        #set($columnName=$column.columnName)
        #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
        #set($mpMethod=$column.queryType.toLowerCase())
        #if($queryType != 'BETWEEN')
        #if($javaType == 'String')
        #set($condition='StringUtils.isNotBlank(entity.get'+$AttrName+'())')
        #else
        #set($condition='entity.get'+$AttrName+'() != null')
        #end
                .$mpMethod($condition, ${ClassName}::get$AttrName, entity.get$AttrName());
        #else
                .between(params.get("begin$AttrName") != null && params.get("end$AttrName") != null,
                    ${ClassName}::get$AttrName ,params.get("begin$AttrName"), params.get("end$AttrName"));
        #end
        #end
        #end
        return example;
    }

    @Override
    public void deleteBatch(List<Long> ids) {
        baseMapper.deleteBatch(ids);
    }

    public void deleteBatch(List<Long> ids) {
        baseMapper.deleteBatch(ids);

    @Override
    public int updateBatchSelective(List<${ClassName} > list) {
        return baseMapper.updateBatchSelective(list);
    }

    @Override
    public int updateBatchSelectiveLimit(List<${ClassName} > list, int size) {
        return baseMapper.updateBatchSelectiveLimit(list,size);
    }

    @Override
    public int insertAllFieldBatch(List<${ClassName} > list) {
        return baseMapper.insertAllFieldBatch(list);
    }
}
